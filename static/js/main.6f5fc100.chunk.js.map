{"version":3,"sources":["components/Question.js","components/Questions.js","App.js","reportWebVitals.js","index.js"],"names":["Question","question","options","option","isCorrect","Questions","LoopQuestions","showScore","setLoopQuestions","score","setShowScore","updateLoopQuestion","setScore","restartGame","className","length","onClick","map","href","App","useState","answer","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAyCeA,EAvCE,CACb,CACIC,SAAU,kDACVC,QAAS,CACL,CAACC,OAAQ,OAAQC,WAAW,GAC5B,CAACD,OAAQ,+BAAgCC,WAAW,GACpD,CAACD,OAAQ,cAAeC,WAAW,GACnC,CAACD,OAAQ,WAAYC,WAAW,KAGxC,CACIH,SAAU,oCACVC,QAAS,CACL,CAACC,OAAQ,KAAMC,WAAW,GAC1B,CAACD,OAAQ,KAAMC,WAAW,GAC1B,CAACD,OAAQ,KAAMC,WAAW,GAC1B,CAACD,OAAQ,IAAKC,WAAW,KAGjC,CACIH,SAAU,4BACVC,QAAS,CACL,CAACC,OAAQ,MAAOC,WAAW,GAC3B,CAACD,OAAQ,SAAUC,WAAW,GAC9B,CAACD,OAAQ,iBAAkBC,WAAW,GACtC,CAACD,OAAQ,SAAUC,WAAW,KAGtC,CACIH,SAAU,+EACVC,QAAS,CACL,CAACC,OAAQ,UAAWC,WAAW,GAC/B,CAACD,OAAQ,QAASC,WAAW,GAC7B,CAACD,OAAQ,SAAUC,WAAW,GAC9B,CAACD,OAAQ,sBAAuBC,WAAW,M,OCQxCC,EAzCG,SAAC,GASR,IARHC,EAQE,EARFA,cAEAC,GAME,EAPFC,iBAOE,EANFD,WAEAE,GAIE,EALFC,aAKE,EAJFD,OAEAE,GAEE,EAHFC,SAGE,EAFFD,oBACAE,EACE,EADFA,YAER,OACI,8BACCN,EACG,sBAAKO,UAAU,gBAAf,UACI,8CAAiBL,EAAjB,WAAgCT,EAASe,OAAzC,OACA,wBAAQD,UAAU,aAAaE,QAASH,EAAxC,2BAGJ,sBAAKC,UAAU,YAAf,UACI,6BAAKd,EAASM,GAAeL,WAEzB,qBAAKa,UAAU,UAAf,SACKd,EAASM,GAAeJ,QAAQe,KAAI,SAAAhB,GACjC,OACA,mBAAGiB,KAAK,IACJF,QAAS,kBAAML,EAAmBV,EAASG,YAC3CU,UAAU,kBAFd,SAMKb,EAASE,QAHLF,EAASE,mB,MCqB3BgB,MA9Cf,WAAgB,IAAD,EAC6BC,mBAAS,GADtC,mBACNd,EADM,KACSE,EADT,OAGqBY,oBAAS,GAH9B,mBAGNb,EAHM,KAGKG,EAHL,OAKaU,mBAAS,GALtB,mBAKNX,EALM,KAKCG,EALD,KA0Bb,OACE,qBAAKE,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,uCAEA,cAAC,EAAD,CACER,cAAeA,EACfE,iBAAkBA,EAClBD,UAAWA,EACXG,aAAcA,EACdD,MAAOA,EACPG,SAAUA,EACVD,mBA9BmB,SAACU,KACV,IAAXA,GACCT,EAASH,EAAQ,GAGlBH,EAAgBN,EAASe,OAAS,GAEjCP,EADsBF,EAAgB,GAGtCI,GAAa,IAsBbG,YAlBY,WAChBS,OAAOC,SAASC,QAAO,YCfdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f5fc100.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Question = [\r\n    {\r\n        question: 'if I were you, would you be me or you I be you?',\r\n        options: [\r\n            {option: 'wtf?', isCorrect: true},\r\n            {option: 'I would be me, but also you.', isCorrect: false},\r\n            {option: 'I... y-yes.', isCorrect: false},\r\n            {option: 'thirteen', isCorrect: false}\r\n        ]\r\n    },\r\n    {\r\n        question: 'What is the sum of 3 + 4 * 2 / 1?', \r\n        options: [\r\n            {option: '18', isCorrect: false},\r\n            {option: '11', isCorrect: true},\r\n            {option: '14', isCorrect: false},\r\n            {option: '7', isCorrect: false}\r\n        ]\r\n    },\r\n    {\r\n        question: 'What is the color of SUN?', \r\n        options: [\r\n            {option: 'red', isCorrect: false},\r\n            {option: 'orange', isCorrect: false},\r\n            {option: 'reddish orange', isCorrect: false},\r\n            {option: 'yellow', isCorrect: true}\r\n        ]\r\n    },\r\n    {\r\n        question: 'Considering that the sky is blue and the earth is a square, what is my name?', \r\n        options: [\r\n            {option: 'Juliana', isCorrect: false},\r\n            {option: 'Shrek', isCorrect: false},\r\n            {option: 'Oliver', isCorrect: false},\r\n            {option: '>> GABRIEL JODAS <<', isCorrect: true}\r\n        ]\r\n    }\r\n]\r\n\r\nexport default Question;","import React from 'react';\r\nimport Question from './Question';\r\n\r\nconst Questions = ({\r\n        LoopQuestions, \r\n        setLoopQuestions, \r\n        showScore, \r\n        setShowScore, \r\n        score, \r\n        setScore, \r\n        updateLoopQuestion, \r\n        restartGame\r\n    }) => {\r\nreturn (\r\n    <div>\r\n    {showScore ? (\r\n        <div className=\"score-section\">\r\n            <h2> You scored {score} out of {Question.length} </h2>\r\n            <button className=\"play-again\" onClick={restartGame}>Play Again</button>\r\n        </div>\r\n        ) : (\r\n        <div className=\"questions\">\r\n            <h2>{Question[LoopQuestions].question}</h2>\r\n    \r\n                <div className=\"options\">\r\n                    {Question[LoopQuestions].options.map(question => {\r\n                        return (\r\n                        <a href=\"#\" \r\n                            onClick={() => updateLoopQuestion(question.isCorrect)}\r\n                            className=\"question-option\" \r\n                            key={question.option}\r\n\r\n                        >\r\n                            {question.option}\r\n                        </a>\r\n                        )}\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Questions;","import React, { useState } from 'react';\nimport Questions from './components/Questions';\nimport Question from './components/Question';\nimport './App.css';\n\nfunction App() {\n  const [LoopQuestions, setLoopQuestions] = useState(0);\n\n  const [showScore, setShowScore] = useState(false);\n\n  const [score, setScore] = useState(0);\n\n\n  const updateLoopQuestion = (answer) => {\n      if(answer === true){\n          setScore(score + 1);\n      } \n\n      if(LoopQuestions < Question.length - 1) {\n          let updatedQuestion = LoopQuestions + 1;\n          setLoopQuestions(updatedQuestion);\n      } else {\n          setShowScore(true);\n      }\n  }\n\n  const restartGame = () => {\n      window.location.reload(true);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"quizz-container\">\n        <h1>Quizz</h1>\n\n        <Questions \n          LoopQuestions={LoopQuestions}\n          setLoopQuestions={setLoopQuestions}\n          showScore={showScore}\n          setShowScore={setShowScore}\n          score={score}\n          setScore={setScore}\n          updateLoopQuestion={updateLoopQuestion}\n          restartGame={restartGame}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}